{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/map/map.component.ts","webpack:///src/app/components/map/map.component.html","webpack:///src/app/components/sidebar/data.ts","webpack:///src/app/components/sidebar/searchbar/searchbar.component.ts","webpack:///src/app/components/sidebar/searchbar/searchbar.component.html","webpack:///src/app/components/sidebar/sidebar.component.ts","webpack:///src/app/components/sidebar/sidebar.component.html","webpack:///src/app/services/data.service.ts","webpack:///src/app/services/map.service.ts","webpack:///src/app/services/sidebar.service.ts","webpack:///src/app/services/tensorflow.service.ts","webpack:///src/app/services/trendsapi.service.ts","webpack:///src/environments/environment.prod.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///node-fetch (ignored)","webpack:///util (ignored)","webpack:///crypto (ignored)","webpack:///string_decoder (ignored)","webpack:///fs (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","TensorflowService","title","loadModel","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","MapComponent","map","buildMap","single","SearchbarComponent","trendsapiService","sidebarService","clicked","byDate","searchForm","required","event","preventDefault","valid","getData","keyword","get","value","year","res","parseCountries","arraybyDate","subscribe","err","console","log","onSubmit","SidebarComponent","DataService","view","showLegend","showLabels","colorScheme","domain","Object","assign","date","Math","round","changeDate","i","providedIn","MapService","accessToken","mapbox","token","container","style","center","zoom","SidebarService","CountriesArray","_countries","countries","asObservable","byDateArray","_byDate","parsedData","parsedDay","data","forEach","country","push","length","next","index","unsubscribe","TrendsapiService","epochs","split","windowSize","batchSize","receivedData_sub","receivedData","presentData","selectCountry","createDataset","train","backend","Tfmodel","strict","layerModel","Model","selected","element","indexOf","selectedData","_train","slice","_validate","trainSet","sliceArr","validateSet","arr","tensor","x","compile","optimizer","adam","loss","meanSquaredError","metrics","fit","callbacks","info","history","acc","http","_receivedData","params","reject","trendsapi","environment","production","geocoding","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { TensorflowService } from './services/tensorflow.service';\r\nimport { Component, AfterContentInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements AfterContentInit{\r\n  title = 'EnVision';\r\n\r\n  constructor(private TensorflowService: TensorflowService) {\r\n\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // call tf service to import model\r\n    this.TensorflowService.loadModel()\r\n  }\r\n}\r\n"," <!DOCTYPE html>\r\n <html lang=\"en\">\r\n <head>\r\n   <title>Document</title>\r\n    <!-- mapbox css import -->\r\n  <link href='https://api.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.css' rel='stylesheet'/>\r\n </head>\r\n <body>\r\n  <app-map></app-map>\r\n\r\n  <app-sidebar class=\"\"></app-sidebar>\r\n\r\n </body>\r\n </html>\r\n\r\n\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { ResizableModule  } from 'angular-resizable-element';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\n\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\r\nimport { MapComponent } from './components/map/map.component';\r\nimport { SearchbarComponent } from './components/sidebar/searchbar/searchbar.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    SidebarComponent,\r\n    MapComponent,\r\n    SearchbarComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    MatRadioModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n    BrowserAnimationsModule,\r\n    NgxChartsModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MapService } from 'src/app/services/map.service'\r\n\r\n@Component({\r\n  selector: 'app-map',\r\n  templateUrl: './map.component.html',\r\n  styleUrls: ['./map.component.scss']\r\n})\r\nexport class MapComponent implements OnInit {\r\n\r\n  constructor(private map:MapService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.map.buildMap()\r\n  }\r\n\r\n}\r\n","<link href='https://api.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.css' rel='stylesheet'/>\r\n<div id='mapbox'></div>\r\n","export var single = [\r\n    {\r\n      \"name\": \"Germany\",\r\n      \"value\": 1\r\n    },\r\n    {\r\n      \"name\": \"USA\",\r\n      \"value\": 1\r\n    },\r\n    {\r\n      \"name\": \"France\",\r\n      \"value\": 1\r\n    },\r\n    {\r\n      \"name\": \"UK\",\r\n      \"value\": 1\r\n    },\r\n    {\r\n      \"name\": \"Italy\",\r\n      \"value\": 1\r\n    },\r\n    {\r\n      \"name\": \"Spain\",\r\n      \"value\": 1\r\n    },\r\n    {\r\n    \"name\": \"Canada\",\r\n    \"value\": 1\r\n    }\r\n  ];\r\n","import { TrendsapiService } from './../../../services/trendsapi.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { SidebarService } from  './../../../services/sidebar.service'\r\nimport { Subscription } from 'rxjs';\r\n@Component({\r\n  selector: 'app-searchbar',\r\n  templateUrl: './searchbar.component.html',\r\n  styleUrls: ['./searchbar.component.scss']\r\n})\r\nexport class SearchbarComponent implements OnInit {\r\n  searchForm: FormGroup\r\n  clicked: boolean = false\r\n\r\n  constructor(private trendsapiService: TrendsapiService,\r\n              private sidebarService: SidebarService) {}\r\n  byDate: any = []\r\n  private arraybyDate: Subscription\r\n\r\n  ngOnInit(): void {\r\n    this.searchForm = new FormGroup({\r\n      'keyword': new FormControl(null, Validators.required),\r\n      'year': new FormControl(null, Validators.required),\r\n    })\r\n  }\r\n\r\n  // search is performed either by button or enter\r\n  onSubmit(event) {\r\n    // stop page refresh\r\n    event.preventDefault()\r\n    this.clicked = true\r\n\r\n    // check if form is complete\r\n    if (this.searchForm.valid) {\r\n\r\n      // use getData to get backend information\r\n      this.trendsapiService.getData({\r\n        keyword: this.searchForm.get('keyword').value,\r\n        year: this.searchForm.get('year').value,\r\n      }).then((res) => {\r\n\r\n        // parse by week\r\n        this.sidebarService.parseCountries(res)\r\n        this.arraybyDate = this.sidebarService.byDate.subscribe((byDate) => this.byDate = byDate)\r\n      }).catch((err) => {\r\n        console.log(err)\r\n      })\r\n    } else {\r\n      // look for invalid year\r\n      if (!this.searchForm.get('year').valid) {\r\n        // this.searchForm.patchValue({\r\n        //   keyword: 'Must envision a year!'\r\n        // })\r\n      }\r\n\r\n      // look for invalid keyword\r\n      if (!this.searchForm.get('keyword').valid) {\r\n        // this.searchForm.patchValue({\r\n        //   keyword: 'Must envision something!'\r\n        // })\r\n      }      \r\n    }    \r\n  }\r\n}\r\n","<form id=\"form\" [formGroup]=\"searchForm\" (ngSubmit)=\"onSubmit($event)\" autocomplete=\"off\">\r\n\r\n    <div class=\"row\">\r\n        <!-- keyword -->\r\n        <mat-form-field class=\"col-6\">\r\n            <mat-label class=\"\">Search for a trend</mat-label>\r\n            <input matInput class=\"\" formControlName=\"keyword\" id=\"seachInput\" type=\"text\" placeholder=\"ex: #BLM\" aria-placeholder=\"ex: #BLM\">\r\n            <small id=\"passwordHelpBlock\" class=\"text-danger\" *ngIf=\"!searchForm.get('keyword').valid && clicked\">Must Envision a trend!</small>\r\n        </mat-form-field>\r\n\r\n        <!-- year -->\r\n        <mat-form-field class=\"col-4\">\r\n            <mat-label class=\"\">Select a year</mat-label>\r\n            <mat-select formControlName=\"year\">\r\n                <mat-option value=\"2004\">2004</mat-option>\r\n                <mat-option value=\"2005\">2005</mat-option>\r\n                <mat-option value=\"2006\">2006</mat-option>\r\n                <mat-option value=\"2007\">2007</mat-option>\r\n                <mat-option value=\"2008\">2008</mat-option>\r\n                <mat-option value=\"2009\">2009</mat-option>\r\n                <mat-option value=\"2010\">2010</mat-option>\r\n                <mat-option value=\"2011\">2011</mat-option>\r\n                <mat-option value=\"2012\">2012</mat-option>\r\n                <mat-option value=\"2013\">2013</mat-option>\r\n                <mat-option value=\"2014\">2014</mat-option>\r\n                <mat-option value=\"2015\">2015</mat-option>\r\n                <mat-option value=\"2016\">2016</mat-option>\r\n                <mat-option value=\"2017\">2017</mat-option>\r\n                <mat-option value=\"2018\">2018</mat-option>\r\n                <mat-option value=\"2019\">2019</mat-option>\r\n                <mat-option value=\"2020\">2020</mat-option>\r\n            </mat-select>\r\n            <small id=\"passwordHelpBlock\" class=\"text-danger\" *ngIf=\"!searchForm.get('year').valid && clicked\">Must Envision a year!</small>\r\n        </mat-form-field>       \r\n\r\n        <!-- submit button -->\r\n        <img class=\"col-2 img\" src=\"assets/img/logo.png\" (click)=\"onSubmit($event)\">\r\n    </div>   \r\n</form>","import { environment } from 'src/environments/environment';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { TensorflowService } from './../../services/tensorflow.service';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\nimport { ResizableModule } from 'angular-resizable-element';\r\nimport { TrendsapiService } from './../../services/trendsapi.service';\r\nimport { DataService } from './../../services/data.service'\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { single } from './data';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.scss']\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n  single: any[];\r\n  view: any[] = [240,1500]\r\n  // options\r\n  showLegend: boolean = true;\r\n  showLabels: boolean = true;\r\n\r\n  colorScheme = {\r\n    domain: ['#5AA454', '#E44D25', '#CFC0BB', '#7aa3e5', '#a8385d', '#aae3f5']\r\n  };\r\n\r\n  constructor(private DataService: DataService, private TensorflowService: TensorflowService, private trendsapiService: TrendsapiService) {\r\n    Object.assign(this, { single });\r\n  }\r\n\r\n\r\n  changeDate(date){\r\n    console.log(this.DataService.getData(date.value))\r\n   Object.assign(this,this.DataService.getData(date.value))\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  formatLabel(value: number) {\r\n    if (value >= 1000) {\r\n      return Math.round(value / 1000) + 'k';\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n}\r\n","\r\n    <mat-drawer-container class=\"example-sidenav-container\" [hidden]='!drawer.opened' autosize>\r\n\r\n      <mat-sidenav #drawer class=\"container-fluid\" mode=\"side\" opened='true'>\r\n        <button class=\"\" mat-button id='closeBtn' (click)=\"drawer.toggle()\">\r\n            <span>&times;</span>\r\n        </button>\r\n        <app-searchbar class=\"\"></app-searchbar>\r\n\r\n        <div class=\"row outer\">\r\n\r\n        <div class=\"col-6 inner\">\r\n          <ngx-charts-pie-grid class\r\n            [view]=\"view\"\r\n            [scheme]=\"colorScheme\"\r\n            [results]=\"single\">\r\n        </ngx-charts-pie-grid>\r\n\r\n\r\n        <mat-slider\r\n          #matslider\r\n          [displayWith]=\"formatLabel\"\r\n          min=\"1\"\r\n          max=\"56\"\r\n          [value] = \"matslider\"\r\n          (input)='changeDate($event)'\r\n          >\r\n        </mat-slider>\r\n        <span>{{matslider.value}}</span>\r\n\r\n        </div>\r\n        <div class=\"col-6\">\r\n          <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur rerum vel ipsam a corrupti perferendis, perspiciatis recusandae obcaecati cumque iusto doloremque voluptatum architecto exercitationem eveniet commodi rem provident animi at!</p>\r\n        </div>\r\n      </div>\r\n\r\n    </mat-sidenav>\r\n\r\n  </mat-drawer-container>\r\n\r\n  <div id=\"openBtn\">\r\n      <button type=\"button\" mat-raised-button (click)=\"drawer.toggle()\">\r\n      Open Sidebar\r\n      </button>\r\n  </div>\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { SidebarService } from  './sidebar.service'\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n  byDate: any = []\r\n  private arraybyDate: Subscription\r\n\r\n  constructor(private sidebarService: SidebarService) { }\r\n\r\n  getData(i){\r\n  this.arraybyDate = this.sidebarService.byDate.subscribe((byDate)=>this.byDate = byDate)\r\n  // console.log(this.arraybyDate)\r\n  return (this.arraybyDate)[i]\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as Mapboxgl from 'mapbox-gl'\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MapService {\r\n  map: Mapboxgl.Map\r\n  constructor() {\r\n\r\n  }\r\n\r\n  buildMap() {\r\n    this.map = new Mapboxgl.Map({\r\n      accessToken: environment.mapbox.token,\r\n      container: 'mapbox', // container id\r\n      style: 'mapbox://styles/travelnet/ckb47dkvn0dh31ila3aizjqlt',\r\n      center: [-71.22, 46.85], // starting position\r\n      zoom: 2, // starting zoom\r\n    })\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { CountriesModel } from './../components/sidebar/countries.model'\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SidebarService implements OnDestroy{\r\n  private CountriesArray: Array<CountriesModel> = []\r\n  private _countries: BehaviorSubject<any> = new BehaviorSubject(this.CountriesArray)\r\n  public countries: Observable<any> = this._countries.asObservable()\r\n\r\n  private byDateArray: Array<CountriesModel> = []\r\n  private _byDate: BehaviorSubject<any> = new BehaviorSubject(this.byDateArray)\r\n  public byDate: Observable<any> = this._byDate.asObservable()\r\n  constructor(){}\r\n\r\n\r\n  parseCountries(_countries):any{\r\n    let parsedData = [];\r\n    for (var i = 0; i< (_countries.data)[0].data.length; i++){\r\n     let parsedDay = [];\r\n      (_countries.data).forEach(country => {\r\n        parsedDay.push((country.data)[i])\r\n        });\r\n        parsedData.push(parsedDay)\r\n\r\n      }\r\n    console.log(parsedData)\r\n    this._byDate.next(parsedData)\r\n    }\r\n  getCountriesData(_byDate, index ):any{\r\n    return _byDate[index]\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._byDate.unsubscribe()\r\n    this._countries.unsubscribe()\r\n  }\r\n\r\n}\r\n","import { CountriesModel } from './../components/sidebar/countries.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { TrendsapiService } from './trendsapi.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from './../../environments/environment.prod';\r\nimport { Injectable, OnDestroy, AfterContentInit } from '@angular/core';\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport { prepareSyntheticListenerName } from '@angular/compiler/src/render3/util';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TensorflowService implements OnDestroy {\r\n  // store imported model\r\n  private Model: tf.LayersModel\r\n\r\n  // subscription from trendsapi\r\n  private receivedData_sub: Subscription\r\n\r\n  // store data from subscription\r\n  public presentData: {[key: string]: any}\r\n\r\n  // data from selected country\r\n  selectedData: number[]\r\n\r\n  // training parameters\r\n  epochs: number = 45\r\n  split: number = 40\r\n  windowSize: number = 8\r\n  batchSize: number = 3\r\n\r\n  // finished dataset\r\n  trainSet: tf.Tensor\r\n  validateSet: tf.Tensor\r\n\r\n  constructor(private TrendsapiService: TrendsapiService) {\r\n\r\n\r\n    // subscribe to trendsapi calls\r\n    this.receivedData_sub = this.TrendsapiService.receivedData.subscribe(data => {\r\n      this.presentData = data\r\n      this.selectCountry('US')\r\n      this.createDataset()\r\n      this.train()\r\n    })\r\n  }\r\n\r\n  loadModel() {\r\n    // import keras model from backend w/o weights\r\n    tf.loadLayersModel(environment.backend.Tfmodel, {strict:false})\r\n    .then((layerModel) => {\r\n      console.log('model imported successfully')\r\n      this.Model = layerModel\r\n    })\r\n    .catch((err) => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  // setup training data for selected country\r\n  selectCountry(country: string) {\r\n    if (this.Model && this.presentData) {\r\n      // get all values for 1 country\r\n      let selected = []\r\n      this.presentData.data.forEach(element => {\r\n        if (element.country == country) {\r\n          this.presentData.data[this.presentData.data.indexOf(element)].data.forEach(element => {\r\n            selected.push(element.value)\r\n          });\r\n          this.selectedData = selected\r\n          console.log(this.selectedData)\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // creates dataset for training\r\n  createDataset() {\r\n    if (this.selectedData) {\r\n      let _train: number[] = this.selectedData.slice(0, this.split)\r\n      let _validate: number[] = this.selectedData.slice(this.split)\r\n      this.trainSet = tf.tensor(this.sliceArr(_train))\r\n      this.validateSet = tf.tensor(this.sliceArr(_validate))\r\n    }\r\n\r\n  }\r\n\r\n  // slice arrays for createDataset\r\n  sliceArr(arr: any[]): any {\r\n    let tensor: any[] = []\r\n    for (let x = 0; x < arr.length; x++) {\r\n      if (x+this.windowSize > arr.length) {\r\n        break\r\n      } else {\r\n        tensor.push([arr.slice(x, (x+this.windowSize -1)), [arr[x+(this.windowSize - 1)]]])\r\n      }\r\n    }\r\n    console.log(tensor)\r\n    return tensor\r\n  }\r\n\r\n  // compile & train the model\r\n  train() {\r\n    if (this.Model) {\r\n      this.Model.compile({\r\n        optimizer: tf.train.adam(0.0001),\r\n        loss: tf.losses.meanSquaredError,\r\n        metrics: ['accuracy']\r\n      })\r\n      this.Model.fit(this.trainSet, this.validateSet, {\r\n        epochs: this.epochs,\r\n        batchSize: this.batchSize,\r\n        callbacks: []\r\n      })\r\n      .then((info) => {\r\n        console.log('complete', info.history.acc)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n        console.log(err)\r\n      })\r\n    }\r\n  }\r\n\r\n  predict() {\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.receivedData_sub.unsubscribe()\r\n  }\r\n}\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TrendsapiService implements OnDestroy {\r\n  // observables for tf service\r\n  private _receivedData: BehaviorSubject<any> = new BehaviorSubject('')\r\n  public receivedData: Observable<any> = this._receivedData.asObservable()\r\n\r\n  constructor(private http: HttpClient) { \r\n    \r\n  }  \r\n\r\n  // params must be an object with {\r\n  //  keyword: keyword (string)\r\n  //  year: year (string or number)\r\n  // }\r\n  getData(params: any) {\r\n    return new Promise((resolve, reject) => {\r\n      this.http.get<any>(environment.backend.trendsapi, {\r\n        params \r\n      }).subscribe((res) => {\r\n        this._receivedData.next(res)\r\n        resolve(res)\r\n      }, (err) => {\r\n        reject(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n  }\r\n}","export const environment = {\r\n  production: true,\r\n\r\n  backend: {\r\n    Tfmodel: 'http://localhost:3000/Tfmodel/model.json'\r\n  },\r\n\r\n  mapbox: {\r\n    token: 'pk.eyJ1IjoidHJhdmVsbmV0IiwiYSI6ImNrYjJ4bnpxZDBnMHUydG10cXJmeGNjazEifQ.Z2ajmP1ywUc77Z74VlXmWw',\r\n    geocoding: 'https://api.mapbox.com/geocoding/v5/mapbox.places'\r\n  },\r\n}\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n\r\n  backend: {\r\n    trendsapi: 'http://localhost:3000/search',\r\n    Tfmodel: 'http://localhost:3000/Tfmodel'\r\n  },\r\n\r\n  mapbox: {\r\n    token: 'pk.eyJ1IjoidHJhdmVsbmV0IiwiYSI6ImNrOTk3cHkwaDAzaHkzZHEwMm03ZGN0MG8ifQ.j24u0Q5RbYw7PW4tVpGjmQ',\r\n    geocoding: 'https://api.mapbox.com/geocoding/v5/mapbox.places'\r\n  },\r\n}\r\n\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"]}